{"version":3,"sources":["components/index.js","SketchPadWrapper/SketchPad.js","components/Pencil.js","App.js","serviceWorker.js","index.js"],"names":["componentToHex","c","hex","toString","length","rgbToHex","r","g","b","sketchToolsMap","context","stroke","points","onMouseDown","x","y","color","size","id","v4","tool","drawLine","item","start","save","lineJoin","lineCap","beginPath","lineWidth","strokeStyle","globalCompositeOperation","moveTo","lineTo","closePath","restore","onMouseMove","newPoint","slice","push","onMouseUp","onDebouncedMouseMove","debouncedPoints","onTouchStart","onTouchMove","onTouchEnd","draw","animate","time","i","j","setTimeout","bind","SketchPad","props","initTool","getTouchPosition","this","canvas","findDOMNode","canvasRef","ctx","getContext","e","getCursorPosition","stopPropagation","getBoundingClientRect","top","left","clientX","clientY","rect","width","height","canvasWidth","canvasHeight","touches","canvasClassName","isEraser","eraserClassName","isHighLighter","ref","className","onMouseOut","Component","defaultProps","App","state","getActiveClassName","updateToolProperties","condition","hightlighter","eraser","setState","htmlFor","onClick","min","max","type","value","onChange","parseInt","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.715afb2e.chunk.js","sourcesContent":["function componentToHex(c) {\n  var hex = c.toString(16);\n  return hex.length == 1 ? \"0\" + hex : hex;\n}\n\nfunction rgbToHex(r, g, b) {\n  return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n}\n\nexport { componentToHex, rgbToHex };\n\n\nexport {\n  default as Pencil,\n  SKETCH_PENCIL\n} from './Pencil';\n","import React, { Component } from 'react';\nimport { findDOMNode } from 'react-dom'\nimport { SKETCH_PENCIL, Pencil } from \"../components\";\n\nexport const sketchToolsMap = {\n  [SKETCH_PENCIL]: Pencil,\n};\n\nexport default class SketchPad extends Component {\n\n  tool = null;\n  constructor(props) {\n    super(props);\n    this.initTool = this.initTool.bind(this);\n    this.onMouseDown = this.onMouseDown.bind(this);\n    this.onMouseMove = this.onMouseMove.bind(this);\n    this.onMouseUp = this.onMouseUp.bind(this);\n    this.onTouchStart = this.onTouchStart.bind(this);\n    this.onTouchMove = this.onTouchMove.bind(this);\n    this.onTouchEnd = this.onTouchEnd.bind(this);\n    this.getTouchPosition = this.getTouchPosition.bind(this);\n  }\n\n  componentDidMount() {\n    this.canvas = findDOMNode(this.canvasRef);\n    this.ctx = this.canvas.getContext('2d');\n    this.initTool(this.props.tool);\n  }\n\n  initTool(tool) {\n    this.tool = this.props.sketchToolsMap[tool](this.ctx);\n  }\n\n  onMouseDown(e) {\n    this.tool.onMouseDown(...this.getCursorPosition(e), this.props.color, this.props.size);\n  }\n\n  onMouseMove(e) {\n    this.tool.onMouseMove(...this.getCursorPosition(e));\n  }\n\n  onMouseUp(e) {\n    this.tool.onMouseUp(...this.getCursorPosition(e));\n  }\n\n  onTouchStart(e) {\n    e.stopPropagation();\n    const { x,y } = this.getTouchPosition(e);\n    this.tool.onTouchStart(x, y, this.props.color, this.props.size);\n  }\n\n  onTouchMove(e) {\n    e.stopPropagation();\n    const { x,y } = this.getTouchPosition(e);\n    this.tool.onTouchMove(x, y, this.canvas);\n  }\n\n  onTouchEnd(e) {\n    e.stopPropagation();\n    const { x,y } = this.getTouchPosition(e);\n    this.tool.onTouchEnd(x, y, this.canvas);\n  }\n\n  getCursorPosition(e) {\n    const { top, left } = this.canvas.getBoundingClientRect();\n    return [\n      e.clientX - left,\n      e.clientY - top\n    ];\n  }\n  \n  getTouchPosition(e) {\n    const rect = this.canvas.getBoundingClientRect();\n    const { left, top, width, height } = rect;\n    const { width: canvasWidth, height: canvasHeight } = this.canvas;\n    let clientX, clientY;\n\n    // use first touch if available\n    if (e.touches && e.touches.length > 0) {\n      clientX = e.touches[0].clientX;\n      clientY = e.touches[0].clientY;\n    }\n    const finalX = (clientX - left) * (canvasWidth / width);\n    const finalY = (clientY - top) * (canvasHeight / height);\n\n    // return mouse/touch position inside canvas supports both mobile and desktop\n    return {\n      x: finalX,\n      y: finalY\n    };\n  }\n\n\n  render() {\n    const { width, height, canvasClassName, isEraser, isHighLighter } = this.props;\n    const eraserClassName = isEraser ? \"eraser\" : \"\";\n\n    return (\n      <canvas\n        ref={(canvas) => { this.canvasRef = canvas; }}\n        id=\"canvas\"\n        className={`${canvasClassName} ${eraserClassName}`}\n        onMouseDown={this.onMouseDown}\n        onMouseMove={this.onMouseMove}\n        onMouseOut={this.onMouseUp}\n        onMouseUp={this.onMouseUp}\n        onTouchStart={ this.onTouchStart}\n        onTouchMove={this.onTouchMove}\n        onTouchEnd={this.onTouchEnd}\n        width={width}\n        height={height}\n      />\n    )\n  }\n}\n\nSketchPad.defaultProps = {\n  width: 500,\n  height: 500,\n  color: '#000',\n  size: 5,\n  canvasClassName: 'canvas',\n  animate: true,\n  tool: SKETCH_PENCIL,\n  sketchToolsMap\n};\n\n","import { v4 } from 'uuid';\n\nexport const SKETCH_PENCIL = 'pencil';\n\nexport default (context) => {\n  let stroke = null;\n  let points = [];\n\n  const onMouseDown = (x, y, color, size) => {\n    stroke = {\n      id: v4(),\n      tool: SKETCH_PENCIL,\n      color,\n      size,\n      points: [{ x, y }]\n    };\n    return [stroke];\n  };\n\n  const drawLine = (item, start, { x, y }) => {\n    context.save();\n    context.lineJoin = 'round';\n    context.lineCap = 'round';\n    context.beginPath();\n    context.lineWidth = item.size;\n    context.strokeStyle = item.color;\n    context.globalCompositeOperation = 'source-over';\n    context.moveTo(start.x, start.y);\n    context.lineTo(x, y);\n    context.closePath();\n    context.stroke();\n    context.restore();\n  };\n\n  const onMouseMove = (x, y) => {\n    if (!stroke) return [];\n    const newPoint = { x, y };\n    const start = stroke.points.slice(-1)[0];\n    drawLine(stroke, start, newPoint);\n    stroke.points.push(newPoint);\n    points.push(newPoint);\n\n    return [stroke];\n  };\n\n  const onDebouncedMouseMove = () => {\n    const debouncedPoints = points;\n    points = [];\n    return [stroke, debouncedPoints];\n  };\n\n  const onMouseUp = (x, y) => {\n    if (!stroke) return;\n    onMouseMove(x, y);\n    points = [];\n    const item = stroke;\n    stroke = null;\n    return [item];\n  };\n\n  const onTouchStart = (x, y, color, size) => {\n    onMouseDown(x, y, color, size);\n  };\n\n  const onTouchMove = (x, y) => {\n    onMouseMove(x,y);\n  };\n\n  const onTouchEnd = (x, y) => {\n    onMouseUp(x,y);\n  };\n\n  const draw = (item, animate) => {\n    let time = 0;\n    let i = 0;\n    const j = item.points.length;\n    for (i, j; i < j; i++) {\n      if (!item.points[i - 1]) continue;\n      if (animate) {\n        setTimeout(drawLine.bind(null, item, item.points[i - 1], item.points[i]), time);\n        time += 10;\n      } else {\n        drawLine(item, item.points[i - 1], item.points[i]);\n      }\n    }\n  };\n\n  return {\n    onMouseDown,\n    onMouseMove,\n    onDebouncedMouseMove,\n    onMouseUp,\n    onTouchStart,\n    onTouchMove,\n    onTouchEnd,\n    draw,\n  };\n\n};\n","import React, { Component } from 'react';\nimport { SketchPad, SKETCH_PENCIL, rgbToHex } from \"./SketchPadWrapper\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tool:SKETCH_PENCIL,\n      size: 2,\n      color: '#000000',\n      isEraser: false,\n      isHighLighter: false,\n    };\n\n    this.getActiveClassName = this.getActiveClassName.bind(this);\n    this.updateToolProperties = this.updateToolProperties.bind(this);\n  }\n\n  getActiveClassName(condition) {\n    return condition ? 'active' : '';\n  }\n\n  updateToolProperties(color, hightlighter, eraser, size = 5) {\n    this.setState({\n      tool: SKETCH_PENCIL,\n      color: color,\n      size: size,\n      isHighLighter: hightlighter,\n      isEraser: eraser,\n    });\n  }\n\n  render() {\n    const { tool, size, color, isEraser, isHighLighter } = this.state;\n    \n    return (\n      <div className=\"sketchpad-wrapper\">\n        <h1 className=\"title\">React SketchPad</h1>\n        <div className=\"toolswrapper\">\n          <div className=\"tools-container\">\n            <label htmlFor=\"\" className=\"tools-label\">Tools: </label>\n            <div className=\"tools\">\n              <button\n                className={`tool ${this.getActiveClassName(!isEraser && !isHighLighter)}`}\n                onClick={() => this.updateToolProperties(rgbToHex(0, 0, 0), false, false)}\n              >\n                Pencil\n              </button>\n              <button\n                className={`tool ${this.getActiveClassName(isHighLighter)}`}\n                onClick={() => this.updateToolProperties(rgbToHex(251, 255, 128), true, false, 15)}\n              >\n                Hightlighter\n              </button>\n              <button\n                className={`tool ${this.getActiveClassName(isEraser)}`}\n                onClick={() => this.updateToolProperties(rgbToHex(255, 255, 255), false, true)}\n              >\n                Eraser\n              </button>\n            </div>\n          </div>\n          <div className=\"options\">\n            <label htmlFor=\"\" className=\"tools-label\">Size: </label>\n            <input min=\"1\" max=\"20\" type=\"range\" value={size} onChange={(e) => this.setState({size: parseInt(e.target.value)})} />\n          </div>\n          <div className=\"options\">\n            <label htmlFor=\"\" className=\"tools-label\">Color: </label>\n            <input type=\"color\" value={color} onChange={(e) => this.setState({color: e.target.value})} />\n          </div>\n        </div>\n        <div className=\"sketchpad-container\">\n          <SketchPad\n            width={1200}\n            height={600}\n            animate={true}\n            size={size}\n            color={color}\n            tool={tool}\n            isEraser={isEraser}\n            isHighLighter={isHighLighter}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}